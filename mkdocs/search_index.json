{
    "docs": [
        {
            "location": "/", 
            "text": "PTXConf documentation\n\n\nP\nen tablet and \nT\nouch screen \nX\ninput \nConf\niguration tool (\nPTXConf\n).\nConfigures touch/pen devices to work with extended desktops and multiple screens on Linux.\n\n\nUsage\n\n\nTo test this you can simply run the python executable directly from the source directory:\n\n\n$ git clone http://github.com/wenhsinjen/ptxconf.git\n$ cd ptxconf\n$ ./ptxconf.py\n\n\n\n\nIf you find the functionality of this tool useful you can then decide if you want to install, see installation section. After starting the application a tablet pen icon should sit in your system tray:\n\n\n\n\n\n\nFrom the system tray you can then access the configuration dialog:\n\n\n\n\nThe dialog should show the configuration of your extended desktop as a set of monitors offset from each other. Here you can select the input pointer device and associate it directly with a particular monitor. The new mapping does not until after pressing the Apply button.\n\n\nInstallation\n\n\nPTXConf depends on the python gtk2 and the AppIndicator binding. In the current POC state of this software we also depend on the xinput and xrandr command line tools. On debian based systems you can install these packages as follows,\n\n\n$ sudo apt-get install xinput x11-xserver-utils\n$ sudo apt-get install python-gtk2, python-appindicator\n\n\n\n\nThen install this package,\n\n\n$ git clone http://github.com/wenhsinjen/ptxconf.git\n$ cd ptxconf\n$ sudo python setup.py install\n\n\n\n\nAfter this package has been submitted to PyPI you will be able to do,\n\n\n$ sudo pip install ptxconf\n\n\n\n\nAPI code example\n\n\nfrom ptxconftools import ConfController\ncc = ConfController()\n\n# list pen/touch like pointing devices\nfor pt in cc.penTouchIds:\n  print pt, cc.penTouchIds[pt]['id']\n\n# list monitor layout\nfor mon in cc.monitorIds:\n  print mon, cc.monitorIds[mon]\n\n# map pointer device 'myPen' to monitor 'hdmi-1'\ncc.setPT2Monitor('myPen','hdmi-1')", 
            "title": "Home"
        }, 
        {
            "location": "/#ptxconf-documentation", 
            "text": "P en tablet and  T ouch screen  X input  Conf iguration tool ( PTXConf ).\nConfigures touch/pen devices to work with extended desktops and multiple screens on Linux.", 
            "title": "PTXConf documentation"
        }, 
        {
            "location": "/#usage", 
            "text": "To test this you can simply run the python executable directly from the source directory:  $ git clone http://github.com/wenhsinjen/ptxconf.git\n$ cd ptxconf\n$ ./ptxconf.py  If you find the functionality of this tool useful you can then decide if you want to install, see installation section. After starting the application a tablet pen icon should sit in your system tray:    From the system tray you can then access the configuration dialog:   The dialog should show the configuration of your extended desktop as a set of monitors offset from each other. Here you can select the input pointer device and associate it directly with a particular monitor. The new mapping does not until after pressing the Apply button.", 
            "title": "Usage"
        }, 
        {
            "location": "/#installation", 
            "text": "PTXConf depends on the python gtk2 and the AppIndicator binding. In the current POC state of this software we also depend on the xinput and xrandr command line tools. On debian based systems you can install these packages as follows,  $ sudo apt-get install xinput x11-xserver-utils\n$ sudo apt-get install python-gtk2, python-appindicator  Then install this package,  $ git clone http://github.com/wenhsinjen/ptxconf.git\n$ cd ptxconf\n$ sudo python setup.py install  After this package has been submitted to PyPI you will be able to do,  $ sudo pip install ptxconf", 
            "title": "Installation"
        }, 
        {
            "location": "/#api-code-example", 
            "text": "from ptxconftools import ConfController\ncc = ConfController()\n\n# list pen/touch like pointing devices\nfor pt in cc.penTouchIds:\n  print pt, cc.penTouchIds[pt]['id']\n\n# list monitor layout\nfor mon in cc.monitorIds:\n  print mon, cc.monitorIds[mon]\n\n# map pointer device 'myPen' to monitor 'hdmi-1'\ncc.setPT2Monitor('myPen','hdmi-1')", 
            "title": "API code example"
        }, 
        {
            "location": "/API/", 
            "text": "Module confcontroller\n\n\nFunctions\n\n\nCTMGenerator(dw, dh, mw, mh, mx, my)\n\n\ngenerate coordinate transform matrix for a tablet controlling screen out of n_screens in a row\n\n\nClasses\n\n\nConfController\n\n\nThis class exposes information about pen/tablet pointing device configuration\nand gives methods for reconfiguring those devices\n\n\nAncestors (in MRO)\n\n\nconfcontroller.ConfController\n\n\nClass variables\n\n\nmonitorIds\npenIds\n\n\nInstance variables\n\n\npenIds\n\n\nMethods\n\n\ninit\n(self)\n\n\ngetDeviceConfig(self, id)\n\n\ngetMonitorIds(self)\n\n\nReturns a list of screens composing the default x-display\n\n\ngetPenIds(self)\n\n\nReturns a list of input id/name pairs for all available pen/tablet xinput devices\n\n\nrefresh(self)\n\n\nrefreshMonitorIds(self)\n\n\nreload monitor layout information\n\n\nrefreshPenIds(self)\n\n\nreload pen/touch tabled ids\n\n\nresetDeviceConfig(self, id)\n\n\nsetDeviceConfig(self, id, ctm='0.5 0 0.5 0 1 0 0 0 1')\n\n\nsetPen2Monitor(self, pen, monitor)\n\n\nConfigure pen to control monitor", 
            "title": "API"
        }, 
        {
            "location": "/API/#module-confcontroller", 
            "text": "", 
            "title": "Module confcontroller"
        }, 
        {
            "location": "/API/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/API/#ctmgeneratordw-dh-mw-mh-mx-my", 
            "text": "generate coordinate transform matrix for a tablet controlling screen out of n_screens in a row", 
            "title": "CTMGenerator(dw, dh, mw, mh, mx, my)"
        }, 
        {
            "location": "/API/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/API/#confcontroller", 
            "text": "This class exposes information about pen/tablet pointing device configuration\nand gives methods for reconfiguring those devices  Ancestors (in MRO)  confcontroller.ConfController  Class variables  monitorIds\npenIds  Instance variables  penIds  Methods  init (self)  getDeviceConfig(self, id)  getMonitorIds(self)  Returns a list of screens composing the default x-display  getPenIds(self)  Returns a list of input id/name pairs for all available pen/tablet xinput devices  refresh(self)  refreshMonitorIds(self)  reload monitor layout information  refreshPenIds(self)  reload pen/touch tabled ids  resetDeviceConfig(self, id)  setDeviceConfig(self, id, ctm='0.5 0 0.5 0 1 0 0 0 1')  setPen2Monitor(self, pen, monitor)  Configure pen to control monitor", 
            "title": "ConfController"
        }
    ]
}